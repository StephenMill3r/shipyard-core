  // THIS IS FOR CRYPTOMOMS / CRYPTODADS MAIN NFT CONTRACT 
   


init first 130 trait definitions.
   [Old School,Dad-O-Mite,Pool Day Blue,Lawn Green,Lime Green,Coral,Purple,Sky Blurple,ToolBox Yellow,Steel,Tobacco,Woodgrain,Man Cave,Metaverse,STONKS,Light My Fire,CryptoDads Signature,Everything Is Fine,Space,Exodus,Dads After Dark,Rampage,Alien Abduction,Diamond Bliss,Spooky Night,OG Peach,Golden Swirl,Light,Dark,Tatted,Medium,Sunburnt,Alien,Golden,Beer Belly,Diamond,Stitched,OG Skin,Shredded,Brown Bearded,Black Gentleman Stache,Red Bearded,Blonde Bearded,Black Bearded,Blonde GOATee,Grey Fu Manchu,Grey Bearded,Blonde Soulpatch,Five O'Clock Shadow,Red Gentleman Stache,Long Brown Beard,Brown Soulpatch,Brown Gentleman Stache,Red Soulpatch,Blonde Gentleman Stache,Grey Soulpatch,Black GOATee,Grey GOATee,Black Wyatt,Grey Gentleman Stache,Brown GOATee,Long Blonde Beard,Grey Wyatt,Long Grey Beard,Scruff,Black Soulpatch,Rainbow Beard,Long Black Beard,Red Wyatt,Black Fu Manchu,Long Red Beard,Red GOATee,Blonde Fu Manchu,Brown Fu Manchu,Red Fu Manchu,Brown Wyatt,Blonde Wyatt,Golden Beard,Farmer,Braces,Buck,Cigar,Tobacco Pipe,Smurkio,Vampire,Rainbow Grillz,Cigarette,Chip Skylark,WOW,Sad Dad,Underbite,Golden Tooth Pick,Gapped,Gold Grill,Robot,Slime,Drooling,Brainwashed,Diamond Grin,OG Grin,Shiny Smile,Disoriented,Blanked,Rolled Eyes,Conflict Maxi,Bitcoin Maxi,Ape Tears,Arghh!,Trippin',Bag Holder,Eastern,Confirmed Bot,Normal,Blue,Chocolate,Cave Vision,Ghost,Yellow Cat Eyes,Green With Envy,Woke AF,Stoned,Laser,Cyborg,Cookin,Demon Cat Eyes,Hypnotized,VVS Diamonds,Dad Glare,OG Eyes,Wink]
  [Vibes,Vibes,Background,Background,Background,Background,Background,Background,Background,Background,Background,Background,Background,Background,Background,Background,Background,Background,Background,Background,Background,Background,Background,Background,Background,Background,Background,Skin,Skin,Skin,Skin,Skin,Skin,Skin,Skin,Skin,Skin,Skin,Skin,Facial Hair,Facial Hair,Facial Hair,Facial Hair,Facial Hair,Facial Hair,Facial Hair,Facial Hair,Facial Hair,Facial Hair,Facial Hair,Facial Hair,Facial Hair,Facial Hair,Facial Hair,Facial Hair,Facial Hair,Facial Hair,Facial Hair,Facial Hair,Facial Hair,Facial Hair,Facial Hair,Facial Hair,Facial Hair,Facial Hair,Facial Hair,Facial Hair,Facial Hair,Facial Hair,Facial Hair,Facial Hair,Facial Hair,Facial Hair,Facial Hair,Facial Hair,Facial Hair,Facial Hair,Facial Hair,Mouth,Mouth,Mouth,Mouth,Mouth,Mouth,Mouth,Mouth,Mouth,Mouth,Mouth,Mouth,Mouth,Mouth,Mouth,Mouth,Mouth,Mouth,Mouth,Mouth,Mouth,Mouth,Mouth,Eyes,Eyes,Eyes,Eyes,Eyes,Eyes,Eyes,Eyes,Eyes,Eyes,Eyes,Eyes,Eyes,Eyes,Eyes,Eyes,Eyes,Eyes,Eyes,Eyes,Eyes,Eyes,Eyes,Eyes,Eyes,Eyes,Eyes,Eyes,Eyes]
// USE THIS FROM THE SASSY TRAITS CONTRACT INSTEAD OF HARDCODING THE TRAITS LIKE ONCHAIN DINOS
// Change the trait info to be fields needed not what was in sassy contract. Include dads and moms together with a field that distinguishes them.
    function updateTraits(uint256[] calldata tokenIDs, string[] calldata names, string[] calldata sports, string[] calldata categories, string[] calldata rarities) external onlyOwner returns (uint256 numUpdated) {
        require(traitIDs.length == sports.length && traitIDs.length == categories.length && traitIDs.length == rarities.length, "ShreddingSassyTrait: Arrays must be same length");
        for (uint i = 0; i < traitIDs.length; i++) {
            traitIDToTraitInfo[traitIDs[i]] = TraitInfo(traitIDs[i], names[i], sports[i], categories[i], rarities[i]);
        }
        return traitIDs.length;
    }


    //use tokenIDToTraitID which is set at mint time to the next tokenid (of the trait nft) and tokenIDToTraitID[tokenID] = traitID this ties the trait to the token. TraitIDs are set in the UpdateTraitInfo function. 
    //This should be set on both the trait contract and collection contract. ?
    // This is the function that will be called in the tokenURI function to get the traits for the token.
        
        
        /// Dino Trait Struct
    struct MetaDataStruct {
        uint256 id;
        string eyes;
        string eyewear;
        string hair_style;
        string hair_color;
        string hat;
        string holding;
        string shirt;
        string dad_joke;
        string facial_hair;
        string mouth;
        string skin;
        string dads_top_picks;
        string accessory;
        string neck;
        string jewelry;
        string vibes;
    }

//// Store a dinos traits here - this is filled when minted!
    mapping(uint => TraitStruct) public tokenTraits;

//setting traitsstruct
            TraitStruct memory newTraits = TraitStruct({
            body: randBody, // make these trait IDs
            chest: randChest,
            eye: randEyes,
            face: randFace,
            feet: randFeet,
            head: randHead,
            spike: randSpikes
        });

        // Assign the generated traits to the token
        tokenTraits[_tokenID] = newTraits;


  // ONCHAIN TOKENURI FUNCTION GET DINO TRAITS FUNCTION NEEDS TO BE REMADE.
   function _tokenURI(uint256 tokenId) public view override returns (string memory) {
        // Get image
        string memory image = buildSVG(tokenId);

        // Encode SVG data to base64
        string memory base64Image = ''//change to centralized URL

        // Build JSON metadata
        string memory json = string(
            abi.encodePacked(
                '{"name": "OnChain Dinos #', Strings.toString(tokenId), '",',
                '"description": "OnChain Dinos have hatched on Base - 100% stored on the Blockchain",',
                '"attributes": [', _getDinoTraits(tokenId), '],',
                '"image": "data:image/svg+xml;base64,', base64Image, '"}' //change to centralized URL
            )
        );

        // Encode JSON data to base64
        string memory base64Json = Base64.encode(bytes(json));

        // Construct final URI
        return string(abi.encodePacked('data:application/json;base64,', base64Json));
    }


        function _getDinoTraits(uint tokenid) internal view returns (string memory) {

        TraitStruct memory traits = tokenTraits[tokenid];

        string memory DinoEggs = Strings.toString(DinoEggs[tokenid]);

        string memory metadata = string(abi.encodePacked(
        '{"trait_type":"Dino Eggs","display_type": "number", "value":"', DinoEggs, '"},',
        '{"trait_type":"Body", "value":"', body_traits[traits.body], '"},',
        '{"trait_type":"Chest", "value":"', chest_traits[traits.chest], '"},',
        '{"trait_type":"Eyes", "value":"', eye_traits[traits.eye], '"},',
        '{"trait_type":"Face", "value":"', face_traits[traits.face], '"},',
        '{"trait_type":"Feet", "value":"', feet_traits[traits.feet], '"},',
        '{"trait_type":"Head", "value":"', head_traits[traits.head], '"},',
        '{"trait_type":"Spikes", "value":"', spike_traits[traits.spike], '"}'
        ));

        return metadata;

    }
















// SCRIPT FOR DEPLOYING UPGRADEABLE CONTRACTS WITH FOUNDRY
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.25;

import "forge-std/Script.sol";
import "../src/MyUpgradeableToken.sol";
import {Upgrades} from "openzeppelin-foundry-upgrades/Upgrades.sol";

contract DeployScript is Script {

    function run() external returns (address, address) {
        //we need to declare the sender's private key here to sign the deploy transaction
        uint256 deployerPrivateKey = vm.envUint("PRIVATE_KEY");
        vm.startBroadcast(deployerPrivateKey);

        // Deploy the upgradeable contract
        address _proxyAddress = Upgrades.deployTransparentProxy(
            "MyUpgradeableToken.sol",
            msg.sender,
            abi.encodeCall(MyUpgradeableToken.initialize, (msg.sender))
        );

        // Get the implementation address
        address implementationAddress = Upgrades.getImplementationAddress(
            _proxyAddress
        );

        vm.stopBroadcast();

        return (implementationAddress, _proxyAddress);
    }
}

//forge script script/01_Deploy.s.sol:DeployScript --sender ${YOUR_PUBLIC_KEY} --rpc-url mumbai --broadcast -vvvv